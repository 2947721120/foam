// Generated by SchemaImport.js from the ROSY discovery document.
// Do not edit.
var GeneratedCIssue = FOAM.create({
   model_: 'Model',
   name: 'Issue',

   properties: 
   [
      {
         model_: 'ReferenceProperty',
         name: 'author',
         subType: 'IssuePerson',
         help: 'Person who originally filed this issue.',
         subType: 'IssuePerson'
      },
      {
         model_: 'StringArrayProperty',
         name: 'blockedOn',
         help: 'References to issues this issue is blocked on.'
      },
      {
         model_: 'StringArrayProperty',
         name: 'blocking',
         help: 'References to issues blocking on this issue.'
      },
      {
         model_: 'StringArrayProperty',
         name: 'cc',
         help: 'List of people who are CC\'ed on updates to this issue.'
      },
      {
         model_: 'DateProperty',
         name: 'closed',
         help: 'Date and time the issue was closed.'
      },
      {
         model_: 'StringProperty',
         name: 'description',
         help: 'Description of the issue.'
      },
      {
         model_: 'IntegerProperty',
         name: 'id',
         help: 'ID of the issue, unique to this project.'
      },
      {
         model_: 'StringArrayProperty',
         name: 'labels',
         help: 'Labels for this issue.'
      },
      {
         model_: 'ReferenceProperty',
         name: 'mergedInto',
         subType: 'Issue',
         help: 'Reference to the issue this issue was merged into.',
         subType: 'Issue'
      },
      {
         model_: 'ReferenceProperty',
         name: 'movedFrom',
         subType: 'Issue',
         help: 'Reference to the issue this issue was moved from.',
         subType: 'Issue'
      },
      {
         model_: 'StringArrayProperty',
         name: 'movedTo',
         help: 'Reference to the issue(s) this issue was moved to.'
      },
      {
         model_: 'ReferenceProperty',
         name: 'owner',
         subType: 'IssuePerson',
         help: 'Person to whom this issue is currently assigned.',
         subType: 'IssuePerson'
      },
      {
         model_: 'DateProperty',
         name: 'published',
         help: 'Date and time the issue was originally published.'
      },
      {
         model_: 'BooleanProperty',
         name: 'starred',
         help: 'Whether the authenticated user has starred this issue.'
      },
      {
         model_: 'IntegerProperty',
         name: 'stars',
         help: 'Number of stars this issue has.'
      },
      {
         model_: 'StringProperty',
         name: 'state',
         help: 'State of this issue (open or closed).'
      },
      {
         model_: 'StringProperty',
         name: 'status',
         help: 'Status of this issue.'
      },
      {
         model_: 'StringProperty',
         name: 'summary',
         help: 'One-line summary of the issue.'
      },
      {
         model_: 'DateProperty',
         name: 'updated',
         help: 'Date and time the issue was last updated.'
      }
   ]
});


var GeneratedIssuePerson = FOAM.create({
   model_: 'Model',
   name: 'IssueComment',
   properties: 
   [
      {
         model_: 'ReferenceProperty',
         help: 'Person who authored this comment.',
         name: 'author',
         subType: 'IssuePerson'
      },
      {
         model_: 'BooleanProperty',
         help: 'Whether the authenticated user can delete this comment.',
         name: 'canDelete'
      },
      {
         model_: 'StringProperty',
         help: 'Content of this issue comment.',
         name: 'content'
      },
      {
         model_: 'ReferenceProperty',
         help: 'Person who deleted this comment.',
         name: 'deletedBy',
         subType: 'IssuePerson'
      },
      {
         model_: 'IntegerProperty',
         help: '0-based sequence number of this comment, unique to this issue.',
         name: 'id'
      },
      {
         model_: 'StringProperty',
         help: 'Comment on an issue tracked by Google Project Hosting.',
         name: 'kind'
      },
      {
         model_: 'DateProperty',
         help: 'Date and time the issue was last updated.',
         name: 'published'
      },
      {
         model_: 'ReferenceProperty',
         name: 'updates',
         subType: 'IssueCommentUpdate'
      }
   ]
});


var GeneratedIssuePerson = FOAM.create({
   model_: 'Model',
   name: 'IssuePerson',
   properties: 
   [
      {
         model_: 'StringProperty',
         help: 'Link to this user\'s page.',
         name: 'htmlLink'
      },
      {
         model_: 'StringProperty',
         name: 'kind'
      },
      {
         model_: 'StringProperty',
         help: 'User\'s name.',
         name: 'name'
      }
   ]
}); 