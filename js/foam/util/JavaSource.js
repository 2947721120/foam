/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

CLASS({
  package: 'foam.util',
  name: 'JavaSource',

  documentation: function() {/* Generates Java source code from a FOAM
    model. Add a template for each model, named by CONSTANTIZED_MODEL_ID.
  */},

  methods: {
    generate: function(model) { return this.javaSource.call(model); }
  },

  templates: [
    function javaSource() {/*// Generated by FOAM, do not modify.
// Version <%= this.version %><%
  var className       = this.javaClassName;
  var toWrapperClass = function(name) {
    return name === 'int'  ? 'Integer' :
        name === 'double'  ? 'Double'  :
        name === 'float'   ? 'Float'   :
        name === 'boolean' ? 'Boolean' : name;
  };
  var parentClassName = this.extendsModel ? this.extendsModel : 'AbstractFObject';
  if ( GLOBAL[parentClassName] && GLOBAL[parentClassName].abstract )
    parentClassName = 'Abstract' + parentClassName;
%><% if ( this.package ) { %>
package <%= this.package %>;
<% } %>
import foam.core.*;

public<%= this.abstract ? ' abstract' : '' %> class <%= className %>
    extends <%= parentClassName %> {
<% for ( var key in this.properties ) {
    var prop = this.properties[key];
    var klass = toWrapperClass(prop.javaType);
    var extraText = '  ';
    if (prop.hidden) extraText += '  public boolean isHidden() { return true; }\u000a  ';
    if (prop.transient) extraText += '  public boolean isTransient() { return true; }\u000a  ';
    if (prop.help) extraText += '  public String getHelp() { return "' + prop.help + '"; }\u000a  ';
%>
  public final static Property<<%= klass %>> <%= constantize(prop.name) %> = new Abstract<%= prop.javaType.capitalize() %>Property() {
    public String getName() { return "<%= prop.name %>"; }
    public String getLabel() { return "<%= prop.label %>"; }
    public <%= klass %> get(Object o) { return ((<%= this.name %>) o).get<%= prop.name.capitalize() %>(); }
    public void set(Object o, <%= klass %> v) { ((<%= this.name %>) o).set<%= prop.name.capitalize() %>(v); }
    public int compare(Object o1, Object o2) { return compareValues(((<%= this.name%>)o1).<%= prop.name %>_, ((<%= this.name%>)o2).<%= prop.name %>_); }
<%= extraText %>};
<% } %>

  final static Model model__ = new AbstractModel(new Property[] {<% for ( var key in this.properties ) { var prop = this.properties[key]; %> <%= constantize(prop.name) %>,<% } %> }) {
    public String getName() { return "<%= this.id %>"; }
    public String getLabel() { return "<%= this.label %>"; }
    public Property getID() { return <%= this.ids.length ? constantize(this.ids[0]) : 'null' %>; }
    public FObject newInstance() { return new <%= className %>(); }
  };

  public Model model() {
    return model__;
  }
  public static Model MODEL() {
    return model__;
  }

<% for ( var key in this.properties ) { var prop = this.properties[key]; %>
  private <%= prop.javaType %> <%= prop.name %>_;<% } %>

  public <%= className %>() { }
<% if ( this.properties.length ) { %>
  public <%= className %>(<% for ( var key in this.properties ) { var prop = this.properties[key]; %><%= prop.javaType, ' ', prop.name, key < this.properties.length-1 ? ', ': '' %><% } %>)
  {<% for ( var key in this.properties ) { var prop = this.properties[key]; %>
    <%= prop.name %>_ = <%= prop.name %>;<% } %>
  }
<% } %>
<% for ( var key in this.properties ) { var prop = this.properties[key]; var klass = toWrapperClass(prop.javaType); %>
  public <%= klass %> get<%= prop.name.capitalize() %>() {
    return <%= prop.name %>_;
  }
  public void set<%= prop.name.capitalize() %>(<%= klass, ' ', prop.name %>) {
    <%= prop.javaType %> oldValue = <%= prop.name %>_;
    <%= prop.name %>_ = <%= prop.name %>;
    if (((<%= 'Abstract' + prop.javaType.capitalize() + 'Property' %>) <%= constantize(prop.name) %>).compareValues(oldValue, <%= prop.name %>) != 0) {
      firePropertyChange(<%= constantize(prop.name) %>, oldValue, <%= prop.name %>);
    }
  }
<% } %>

  public int hashCode() {
    int hash = 1;
<% for ( var key in this.properties ) { var prop = this.properties[key]; %>
    hash = hash * 31 + hash(<%= prop.name %>_);<% } %>

    return hash;
  }

  public int compareTo(Object obj) {
    if ( obj == this ) return 0;
    if ( obj == null ) return 1;

    <%= this.name %> other = (<%= this.name %>) obj;

    int cmp;
<% for ( var key in this.properties ) { var prop = this.properties[key]; %>
    if ( ( cmp = compare(get<%= prop.name.capitalize() %>(), other.get<%= prop.name.capitalize() %>()) ) != 0 ) return cmp;<% } %>

    return 0;
  }

  public StringBuilder append(StringBuilder b) {
    return b<% for ( var key in this.properties ) { var prop = this.properties[key]; %>
        .append("<%= prop.name %>=").append(get<%= prop.name.capitalize() %>())<%= key < this.properties.length-1 ? '.append(", ")' : '' %><% } %>;
  }

  public Object fclone() {
    <%= this.name %> c = new <%= this.name %>();
<% for ( var key in this.properties ) { var prop = this.properties[key]; %>
    c.set<%= prop.name.capitalize() %>(get<%= prop.name.capitalize() %>());<% } %>
    return c;
  }
}
*/}
  ]
});
