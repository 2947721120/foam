/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

CLASS({
  package: 'foam.util',
  name: 'JavaSource',

  documentation: function() {/* Generates Java source code from a FOAM
    model. Add a template for each model, named by CONSTANTIZED_MODEL_ID.
  */},

  methods: {
    generate: function(model) { return this.javaSource.call(model); }
  },

  templates: [
    function javaSource() {/*
// Generated by FOAM, do not modify.
// Version %%version
<%
  var className       = this.javaClassName;
  var parentClassName = this.extendsModel ? this.extendsModel : 'FObject';

  if ( GLOBAL[parentClassName] && GLOBAL[parentClassName].abstract ) parentClassName = 'Abstract' + parentClassName;

%>
<% if ( this.package ) { %>\
package %%package;

<% } %>\
import foam.core.*;

public<%= this.abstract ? ' abstract' : '' %> class <%= className %>
   extends <%= parentClassName %>
{
   <% for ( var key in this.properties ) { var prop = this.properties[key]; %>
   public final static Property <%= constantize(prop.name) %> = new Abstract<%= prop.javaType.capitalize() %>Property() {
     public String getName() { return "<%= prop.name %>_"; }
     public String getLabel() { return "<%= prop.label %>"; }
     public Object get(Object o) { return ((%%name) o).get<%= prop.name.capitalize() %>(); }
     public void set(Object o, Object v) { ((%%name) o).set<%= prop.name.capitalize() %>(toNative(v)); }
     public int compare(Object o1, Object o2) { return compareValues(((%%name)o1).<%= prop.name %>_, ((%%name)o2).<%= prop.name %>_); }
   };
   <% } %>

   final static Model model__ = new AbstractModel(new Property[] {<% for ( var key in this.properties ) { var prop = this.properties[key]; %> <%= constantize(prop.name) %>,<% } %> }) {
     public String getName() { return "%%name"; }
     public String getLabel() { return "%%label"; }
     public Property id() { return <%= this.ids.length ? constantize(this.ids[0]) : 'null' %>; }
   };

   public Model model() {
     return model__;
   }
   public static Model MODEL() {
     return model__;
   }

   <% for ( var key in this.properties ) { var prop = this.properties[key]; %>
   private <%= prop.javaType %> <%= prop.name %>_;   <% } %>

   public <%= className %>()
   {
   }
<% if ( this.properties.length ) { %> 
   public <%= className %>(<% for ( var key in this.properties ) { var prop = this.properties[key]; %><%= prop.javaType, ' ', prop.name, key < this.properties.length-1 ? ', ': '' %><% } %>)
   {   <% for ( var key in this.properties ) { var prop = this.properties[key]; %>
      <%= prop.name %>_ = <%= prop.name %>;   <% } %>
   }
<% } %>

   <% for ( var key in this.properties ) { var prop = this.properties[key]; %>
   public <%= prop.javaType %> get<%= prop.name.capitalize() %>() {
       return <%= prop.name %>_;
   };
   public void set<%= prop.name.capitalize() %>(<%= prop.javaType, ' ', prop.name %>) {
       <%= prop.name %>_ = <%= prop.name %>;
   };
   <% } %>

   public int hashCode() { 
      int hash = 1;
   <% for ( var key in this.properties ) { var prop = this.properties[key]; %>
      hash = hash * 31 + hash(<%= prop.name %>_);   <% } %>

      return hash;
   }

   public int compareTo(Object obj) {
      if ( obj == this ) return 0;
      if ( obj == null ) return 1;

      %%name other = (%%name) obj;
 
      int cmp;
   <% for ( var key in this.properties ) { var prop = this.properties[key]; %>
      if ( ( cmp = compare(get<%= prop.name.capitalize() %>(), other.get<%= prop.name.capitalize() %>()) ) != 0 ) return cmp;   <% } %>

      return 0;
   }

   public StringBuilder append(StringBuilder b) {
      return b
   <% for ( var key in this.properties ) { var prop = this.properties[key]; %>\
      .append("<%= prop.name %>=").append(get<%= prop.name.capitalize() %>())<%= key < this.properties.length-1 ? '.append(", ")' : '' %> 
   <% } %>      ;
   }

   public Object fclone() {
      %%name c = new %%name();
      <% for ( var key in this.properties ) { var prop = this.properties[key]; %>\
c.set<%= prop.name.capitalize() %>(get<%= prop.name.capitalize() %>());
      <% } %>\
return c;
   }
}
    */}
  ]
 });
