<section title="Views">

      <section title="Custom DetailView with toDetailHTML()">
        <aside>
          <code-sample>
            <title>Implement a toDetailHTML() template</title>
            <source>
              <code-snippet ref="Person" title="Person Model"></code-snippet>
              <code-snippet title="Detailed Person Model">
                <src language="javascript">
                  <code>CLASS({
  name: 'DetailedPerson',
  package: 'foam.sandbox',
  extendsModel: 'foam.sandbox.Person',

  // Implement the toDetailHTML() template to supply a custom view of your
  // data model. Your model isn't actually a view, but DetailView can grab
  // the template you supply and use it to render.
  templates: [
    {
      name: 'toDetailHTML',
      template: function() {/*
        <p>
        Person Description
        <p>$$firstName{mode:'read-only'} <b>$$lastName{mode:'read-only'}</b></p>
        <p>
      */}
    }
  ]
});</code>
                </src>
              </code-snippet>
              <code-snippet title="Example">
                <src language="javascript">
                  <code>apar(
    arequire('foam.sandbox.DetailedPerson', X),
    arequire('foam.ui.DetailView', X)
)(function(DetailPerson, DetailView) {
  var lawyer = DetailPerson.create({
    firstName: 'Harvey',
    lastName: 'Birdman',
  }, X);
  // Though we are creating a DetailView as before, it will check for a toDetailHTML()
  // template on its data, and render that instead of the default view.
  DetailView.create({ data: lawyer }, X).write(X.document);
});
                  </code>
                </src>
              </code-snippet>
            </source>
          </code-sample>
        </aside>
      </section>


      <section title="Custom Views">
        <aside>
          <code-sample>
            <title>A Custom View</title>
            <source>
              <code-snippet ref="Person" title="Person Model"></code-snippet>
              <code-snippet title="Person View">
                <src language="javascript">
                  <code>CLASS({
  name: 'BasicPersonView',
  package: 'foam.sandbox',
  extendsModel: 'foam.ui.View',

  templates: [
    {
      // View renders your toInnerHTML() content inside a div.
      name: 'toInnerHTML',
      template: function() {/*
        <p>
        <h3>Person Custom View</h3>
        <p>$$firstName{mode:'read-only'} $$lastName $$lastName{mode:'read-only'}</p>
        <p>
      */}
    }
  ]
});</code>
                </src>
              </code-snippet>
              <code-snippet title="Example">
                <src language="javascript">
                  <code>apar(
    arequire('foam.sandbox.Person', X),
    arequire('foam.sandbox.BasicPersonView', X)
)(function(Person, BasicPersonView) {

  // Create a person
  var person = Person.create({
    firstName: 'Harvey',
    lastName: 'Birdman',
  }, X);

  // Create an instance of our custom view and set the person as 'data'
  var view = BasicPersonView.create({
    data: person
  }, X);

  // The view will render the data we have set on it
  view.write(X.document);
});</code>
                </src>
              </code-snippet>
            </source>
          </code-sample>
        </aside>
      </section>

      <section title="Custom View using toHTML()">
        <aside>
          <code-sample>
            <title>A Custom View</title>
            <source>
              <code-snippet ref="Person" title="Person Model"></code-snippet>
              <code-snippet title="Person View">
                <src language="javascript">
                  <code>CLASS({
  name: 'ManualPersonView',
  package: 'foam.sandbox',
  // DetailView lets us override toHTML() and still re-render when necessary
  extendsModel: 'foam.ui.DetailView',

  templates: [
    {
      name: 'toHTML',
      // All views are identified in the DOM by their id. You must output an
      // id when you override toHTML().
      template: function() {/*
        <div style="color: red; border: 1px solid black">
          <p>This appears in the DOM, but will not be in the element referenced by the '$'
          property of your view.</p>
          <p>Always keep your content inside a properly id'd element, or use toInnerHTML().</p>
        </div>
        <div id="%%id">
          Official contents:
          <h3>Person Manual View</h3>
          <p><%# this.data.lastName %>, <%# this.data.firstName %>. View id: <%# this.id %></p>
        </div>
      */}
    }
  ]
});</code>
                </src>
              </code-snippet>
              <code-snippet title="Example">
                <src language="javascript">
                  <code>apar(
    arequire('foam.sandbox.Person', X),
    arequire('foam.sandbox.ManualPersonView', X)
)(function(Person, ManualPersonView) {

  // Create a person
  var person = Person.create({
    firstName: 'Harvey',
    lastName: 'Birdman',
  }, X);

  // Create an instance of our custom view and set the person as 'data'
  var view = ManualPersonView.create({
    data: person
  }, X);

  // The view will render the data we have set on it
  view.write(X.document);

  // The view does not have a way to reference the extra content
  // that appears outside its id'd element.
  console.log("View contents: ", view.$.outerHTML);
});</code>
                </src>
              </code-snippet>
            </source>
          </code-sample>
        </aside>
      </section>


</section>
