<book-container id="%%id">
  <book>

    <title-page>
      <book-title>FOAM By Example</book-title>
    </title-page>

    <toc />

    <section title="Models (FOAM Classes)">

      <section title="Create a Model">
        <aside>
          <code-sample openSnippets="-2,-1">
            <title>Define the "Person" Model</title>
            <source>
              <code-snippet name="Person" title="Person Model">
                <src language="javascript">
                  <code>CLASS({
  // Model looked up in conteXt object as 'foam.sandbox.Person'.
  name: 'Person',
  package: 'foam.sandbox',

  // Store data members as "properties".
  properties: [ 'firstName', 'lastName', 'children' ],

  // Store member functions as "methods".
  methods: [
    function fullName() { return this.firstName + ' ' + this.lastName; },
    function invertedName() { return this.lastName + ', ' + this.firstName; }
  ]
});</code>
                </src>
              </code-snippet>
              <code-snippet title="Example">
                <src language="javascript">
                  <code>// In general, FOAM loads a model and its dependencies asynchronously. This
// allows for fast page load and all round high performance.

// Let's asynchronously require -- "arequire" -- our model into our conteXt
// object -- "X" -- to ensure it's ready before we do anything with it.
arequire('foam.sandbox.Person', X)(function(Person) {
  // Use FOAM JSONUtil's prettyModel formatter to output the model.
  console.log(JSONUtil.prettyModel.stringify(Person));
});</code>
                </src>
              </code-snippet>
            </source>
          </code-sample>
        </aside>
      </section>

      <section title="Create a Modelled Object (Class Instance)">
        <aside>
          <code-sample>
            <title>Create Two "Person" Instances</title>
            <source>
              <code-snippet ref="Person" title="Person Model"></code-snippet>
              <code-snippet title="Example">
                <src language="javascript">
                  <code>arequire('foam.sandbox.Person', X)(function(Person) {
  // The first argument to [SomeModel].create specifies property values.
  // The second argument is the conteXt object where the instance is created.
  // Both arguments are optional, and the second is usually omitted; we include
  // it in our examples because each code sample runs in its own context.
  var suzy = Person.create({ firstName: 'Suzy', lastName: 'Smith' }, X);
  var ali = Person.create({ firstName: 'Ali', lastName: 'Sharif' }, X);
  console.log.json(suzy);
  console.log.json(ali);
});</code>
                </src>
              </code-snippet>
            </source>
          </code-sample>
        </aside>
      </section>

      <section title="Working with Modelled Object">

        <section title="Generate JSON">
          <aside>
            <code-sample>
              <title>Generate JSON Description of a "Person" Instance</title>
              <source>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var xi = Person.create({ firstName: 'Xi', lastName: 'Han' }, X);
  console.log('Let console decide how to JSONify object:');
  console.log.json(xi);
  console.log('Let object model decide how to JSONify object:');
  console.log(xi.toJSON());
  console.log('Directly invoke FOAM JSONUtil to get pretty JSON:');
  console.log(JSONUtil.pretty.stringify(xi));
  console.log('Directly invoke FOAM JSONUtil to get compact JSON:');
  console.log(JSONUtil.compact.stringify(xi));
});</code>
                  </src>
                </code-snippet>
                <!-- TODO(markdittmer): For some reason, this example is
                     reversing the order of its two snippets. We should
                     figure out why and fix it. -->
                <code-snippet ref="Person" title="Person Model"></code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Create Modelled Object from JSON">
          <aside>
            <code-sample title="Generate a clone using JSON">
              <title>Generate a "Person" Clone with JSON</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var bondString = '{"model_":"foam.sandbox.Person",' +
      '"firstName":"James",' +
      '"lastName":"Bond"}';
  console.log(bondString);
  var jamesBond = JSONUtil.parse(X, bondString);
  console.log(jamesBond.lastName + ', ' + jamesBond.fullName() + '.');
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Compare Modelled Objects with equals()">
          <aside>
            <code-sample>
              <title>Compare John and Jon</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var john = Person.create({ firstName: 'John', lastName: 'Smith' }, X);
  var jon = Person.create({ firstName: 'Jon', lastName: 'Smith' }, X);
  console.log('Is John the same as Jon? ' + john.equals(jon));
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Compare Modelled Objects with compareTo()">
          <aside>
            <code-sample>
              <title>Compare members of the "Je_ Crew"</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var jen = Person.create({ firstName: 'Jen' }, X);
  var jem = Person.create({ firstName: 'Jem' }, X);
  var jemAgain = Person.create({ firstName: 'Jem' }, X);
  console.log('Compare (Jen, Jem) ' + jen.compareTo(jem));
  console.log('Compare (Jem, Jen) ' + jem.compareTo(jen));
  console.log('Compare (one Jem, another Jem) ' + jem.compareTo(jemAgain));
  var jeb = Person.create({ firstName: 'Jeb' }, X);
  var jed = Person.create({ firstName: 'Jed' }, X);
  var jeCrew = [jen, jed, jem, jeb];
  console.log('Je_ Crew: ' + JSONUtil.compact.stringify(
      jeCrew.map(function(j) { return j.firstName; })));
  jeCrew.sort(function(a, b) { return a.compareTo(b); });
  var crewNames2 = jeCrew.map(function(je_) { return je_.firstName; });
  console.log('Sorted Je_ Crew: ' +
      jeCrew.map(function(j) { return j.firstName; }));
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Object Hash with hashCode()">
          <aside>
            <code-sample>
              <title>Hashing Krishnams</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var krishnam = Person.create({ firstName: 'Krishnam', lastName: 'Patel' }, X);
  console.log('Mr. Patel hashCode: ' + krishnam.hashCode());
  // Changing the data changes the hash.
  krishnam.lastName = 'Kumar';
  console.log('Mr. Kumar hashCode: ' + krishnam.hashCode());
  // Two objects can have the same hash if they store the same data.
  var krishnam2 = Person.create({
    firstName: 'Krishnam',
    lastName: 'Kumar'
  }, X);
  console.log('Mr. Kumar 2 hashCode: ' + krishnam2.hashCode());
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Copy Modelled Objects with clone()">
          <aside>
            <code-sample>
              <title>Cloning Yuki</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var sota = Person.create({ firstName: 'Sota', lastName: 'Itou' }, X);
  var yuki = Person.create({
    firstName: 'Yuki',
    lastName: 'Itou',
    children: [sota]
  }, X);
  var yukiClone = yuki.clone();
  // Changing properties on clone doesn't affect yuki.
  yukiClone.lastName = 'Tanaka';
  console.log('Y.I.: ' + yuki.fullName());
  console.log('Y.T.: ' + yukiClone.fullName());
  // Changing data nested within a property affects both because the copy is
  // shallow.
  sota.lastName = 'Tanaka';
  console.log('Y.I. children: ' + JSONUtil.compact.stringify(yuki.children));
  console.log('Y.T. children: ' + JSONUtil.compact.stringify(yukiClone.children));
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Copy Modelled Objects with deepClone()">
          <aside>
            <code-sample>
              <title>Cloning Lidiya</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var marta = Person.create({ firstName: 'Marta', lastName: 'Makarov' }, X);
  var lidiya = Person.create({
    firstName: 'Lidiya',
    lastName: 'Makarov',
    children: [marta]
  }, X);
  var lidiyaClone = lidiya.deepClone();
  // Changing properties on clone doesn't affect lidiya.
  lidiyaClone.lastName = 'Pankov';
  console.log('L.M.: ' + lidiya.fullName());
  console.log('L.P.: ' + lidiyaClone.fullName());
  // Changing data nested within a property doesn't affect lidiyaClone because
  // the copy is shallow.
  var lidiyaCloneChild = lidiyaClone.children[0];
  lidiyaCloneChild.lastName = 'Pankov';
  console.log('L.M. children: ' + JSONUtil.compact.stringify(lidiya.children));
  console.log('L.P. children: ' + JSONUtil.compact.stringify(lidiyaClone.children));
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Copy Data Between Modelled Objects with copyFrom()">
          <aside>
            <code-sample>
              <title>Copy Hercules to Zeus</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var greekName = Person.create({ firstName: 'Zeus', lastName: 'The Deity' }, X);
  var greekChildren = Person.create({
    children: [Person.create({
      firstName: 'Hercules',
      lastName: 'The Demi-Deity'
    })]
  }, X);
  // Copy data from greekChildren to greekName. The firstName and lastName of
  // greekChildren are not copied because they have the default value (i.e.,
  // names are "not set").
  greekName.copyFrom(greekChildren);
  console.log.json(greekName);
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Output a Default View of a Modelled Object using write()">
          <aside>
            <code-sample hasHTML="true">
              <title>Write Morticia Addams</title>
              <source>
                <code-snippet name="PersonWithView" title="Person Model">
                  <src language="javascript">
                    <code>CLASS({
  name: 'Person',
  package: 'foam.sandbox',

  properties: [
    'firstName',
    'lastName',
    {
      name: 'children',
      // Tell FOAM to use a suitable list view -- "foam.ui.DAOListView" -- to
      // for the default view of the "children" property.
      view: 'foam.ui.DAOListView',
      // Format table cells that contain children: List first names.
      tableFormatter: function(children) {
        if ( ! children ) return '';
        return children.map(function(c) { return c.firstName; }).join(', ');
      }
    }
  ]
});</code>
                  </src>
                </code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var morticia = Person.create({
    firstName: 'Morticia',
    lastName: 'Addams',
    children: [
      Person.create({ firstName: 'Wednesday', lastName: 'Addams' }),
      Person.create({ firstName: 'Pugsley', lastName: 'Addams' })
    ]
  }, X);
  // Write the default view of the modelled object out to this conteXt's
  // document.
  morticia.write(X.document);
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Output a DetailView of a Modelled Object">
          <aside>
            <code-sample>
              <title>Details of Will Smith</title>
              <source>
                <code-snippet ref="PersonWithView" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>apar(
    arequire('foam.sandbox.Person', X),
    arequire('foam.ui.DetailView', X)
)(function(Person, DetailView) {
  var will = Person.create({
    firstName: 'Will',
    lastName: 'Smith',
    children: [
      Person.create({ firstName: 'Jaden', lastName: 'Smith' }, X),
      Person.create({ firstName: 'Willow', lastName: 'Smith' }, X)
    ]
  }, X);
  // Same as previous example, but we manually construct a "DetailView" and
  // render that.
  DetailView.create({ data: will }, X).write(X.document);
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Output a TableView of several Modelled Objects">
          <aside>
            <code-sample>
              <title>Table of the Smith Family</title>
              <source>
                <code-snippet ref="PersonWithView" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>apar(
    arequire('foam.sandbox.Person', X),
    arequire('foam.ui.TableView', X)
)(function(Person, TableView) {
  var smithChildren = [
    Person.create({ firstName: 'Jaden', lastName: 'Smith' }, X),
    Person.create({ firstName: 'Willow', lastName: 'Smith' }, X)
  ];
  var smithParents = [
    Person.create({
      firstName: 'Will',
      lastName: 'Smith',
      children: smithChildren
    }, X),
    Person.create({
      firstName: 'Jada',
      lastName: 'Smith',
      children: smithChildren
    }, X)
  ];
  var smithFamily = smithParents.concat(smithChildren);
  // Same as "DetailView" example with a "TableView" instead.
  TableView.create({
    model: Person,
    data: smithFamily
  }, X).write(X.document);
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Add/Remove a Listener to a Modelled Object">
          <aside>
            <code-sample>
              <title>Listening to Darth Vardar Character Development</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var luke = Person.create({ firstName: 'Luke', lastName: 'Skywalker' }, X);
  var leia = Person.create({ firstName: 'Leia', lastName: 'Skywalker' }, X);
  var darth = Person.create({ firstName: 'Anakin', lastName: 'Skywalker' }, X);

  // Listen to all "topics" published by darth object.
  darth.addListener(function(obj, topics, old, nu) {
    console.log('New darth ' + topics.join('.') + ': ' +
        JSONUtil.pretty.stringify(nu));
  });

  darth.children = [luke, leia];
  darth.firstName = 'Darth';
  darth.lastName = 'Vadar';
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Listen to a Property on a Modelled Object">
          <aside>
            <code-sample>
              <title>Listening to Tom Riddle's First Name</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var theDarkLord = Person.create({
    firstName: 'Tom',
    lastName: 'Riddle'
  }, X);

  // Just listen to changes to first name.
  var listener = function(obj, topics, old, nu) {
    console.log('Mr. ' + obj.lastName + ' has abandoned the name ' + old);
  };
  theDarkLord.addPropertyListener('firstName', listener);

  theDarkLord.lastName = 'Voldemort';
  theDarkLord.firstName = 'Lord';

  theDarkLord.removePropertyListener('firstName', listener);

  // Changes no longer logged.
  theDarkLord.lastName = 'Dead';
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Working with Property Value References">
          <aside>
            <code-sample>
              <title>Working with the Wicked Witch of the West</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var witch = Person.create({ firstName: 'Elphaba', lastName: 'Thropp' }, X);

  // obj.propertyName$ is a "Value" reference to the property named
  // "propertyName" on "obj". Its interface supports get(), set(newValue),
  // getting/setting via "value", addListener/removeListener synonymous with
  // object's addPropertyListener/removePropertyListener.
  var firstNameReference = witch.firstName$;
  console.log('Witch first name: ' + firstNameReference.get());
  console.log('Witch first name: ' + firstNameReference.value);

  var listener = function(obj) {
    console.log(obj.fullName() + ', she\'s a witch!');
  };
  firstNameReference.addListener(listener);

  firstNameReference.set('Wicked');
  console.log('Witch first name: ' + witch.firstName);
  firstNameReference.value = 'Elphaba';
  console.log('Witch first name: ' + witch.firstName);

  firstNameReference.removeListener(listener);

  // Changes no longer logged.
  firstNameReference.value = 'Melted';
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Bind Property Values">
          <aside>
            <code-sample>
              <title>Binding Prime Ministers</title>
              <source>
                <code-snippet ref="Person" title="Person Model"></code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Person', X)(function(Person) {
  var pm1 = Person.create({ firstName: 'Lester', lastName: 'Pearson' }, X);
  var pm2 = Person.create({ firstName: 'Pierre', lastName: 'Trudeau' }, X);

  /* 1 */ console.log(pm1.fullName() + ', ' + pm2.fullName());

  // One-way binding: pm2 follows pm1's first name.
  Events.follow(pm1.firstName$, pm2.firstName$);
  /* 2 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  pm1.firstName = 'Les';
  /* 3 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  // pm1 isn't following pm2.
  pm2.firstName = 'Pierre';
  /* 4 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  // Remove one-way binding.
  Events.unfollow(pm1.firstName$, pm2.firstName$);

  // Two-way binding. Equivalent to Events.follow(a, b); Events.follow(b, a).
  Events.link(pm1.lastName$, pm2.lastName$);
  /* 5 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  pm1.lastName = 'MacDonald';
  /* 6 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  pm2.lastName = 'Trudeau';
  /* 7 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  // Remove two-way binding.
  Events.unlink(pm1.lastName$, pm2.lastName$);

  // One-way binding that maps to a different value.
  Events.map(pm1.lastName$, pm2.lastName$, function(lastName) {
    return '"The Boss" ' + lastName;
  });
  /* 8 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  pm1.lastName = 'Harper';
  /* 9 */ console.log(pm1.fullName() + ', ' + pm2.fullName());

  // Two-way binding that maps to different values.
  Events.relate(pm2.firstName$, pm1.firstName$,
      function(firstName) {
        return '"D.J." ' + firstName;
      },
      function(firstName) {
        return firstName.replace('"D.J." ', '');
      });
  /* 10 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
  pm1.firstName = 'Stephen';
  /* 11 */ console.log(pm1.fullName() + ', ' + pm2.fullName());
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

        <section title="Bind to Multiple dependencies">
          <aside>
            <code-sample openSnippets="-2,-1">
              <title>Automatically Computing Products</title>
              <source>
                <code-snippet title="Products Model">
                  <src language="javascript">
                    <code>CLASS({
  name: 'Products',
  package: 'foam.sandbox',

  properties: [ 'lefts', 'rights', 'products' ],

  methods: [
    function init() {
      // Dynamically update products based on lefts and rights.
      Events.dynamic(function() {
        // Ensure that dependencies are referenced.
        this.lefts;
        this.rights;

        this.products = [];
        var self = this;
        self.lefts.forEach(function(leftOperand) {
          self.rights.forEach(function(rightOperand) {
            self.products.push(leftOperand * rightOperand);
          });
        });
      }.bind(this));
    }
  ]
});</code>
                  </src>
                </code-snippet>
                <code-snippet title="Example">
                  <src language="javascript">
                    <code>arequire('foam.sandbox.Products', X)(function(Products) {
  var p = Products.create({ lefts: [3], rights: [5] }, X);
  console.log(JSONUtil.compact.stringify(p.products));
  p.lefts = [7, 11];
  console.log(JSONUtil.compact.stringify(p.products));
  p.rights = [512, 1024, 1048];
  console.log(JSONUtil.compact.stringify(p.products));
});</code>
                  </src>
                </code-snippet>
              </source>
            </code-sample>
          </aside>
        </section>

      </section>

    </section>

  </book>
</book-container>
